package uz.fozilbek.lesson23.core.dbimport android.content.ContentValuesimport android.content.Contextimport android.database.Cursorimport androidx.core.database.getIntOrNullimport androidx.core.database.getStringOrNullimport uz.fozilbek.lesson23.core.libs.DbHelperimport uz.fozilbek.lesson23.core.models.CustomerDataclass CustomersDb private constructor(context: Context) : DbHelper(context, "lesson22.db") {    companion object {        private lateinit var customersDb: CustomersDb        fun init(context: Context) {            customersDb = CustomersDb(context)        }        fun getInstance(): CustomersDb = customersDb    }    fun getAllCustomers(): ArrayList<CustomerData> {        val data = ArrayList<CustomerData>()        val query = "SELECT * FROM customers"        val cursor: Cursor = mDataBase.rawQuery(query, arrayOf())        cursor.moveToFirst()        while (!cursor.isAfterLast) {            val id = cursor.getLong(0)            val name = cursor.getStringOrNull(1)            val phoneNumber = cursor.getStringOrNull(2)            val city = cursor.getStringOrNull(3)            val age = cursor.getIntOrNull(4)            val customerData = CustomerData(id, name, city, phoneNumber, age)            data.add(customerData)            cursor.moveToNext()        }        cursor.close()        return data    }    fun searchCustomersByName(customerName: String): ArrayList<CustomerData> {        val data = ArrayList<CustomerData>()        val query = "SELECT * FROM customers WHERE name='?%'"        val cursor: Cursor = mDataBase.rawQuery(query, arrayOf(customerName))        cursor.moveToFirst()        while (!cursor.isAfterLast) {            val id = cursor.getLong(0)            val name = cursor.getStringOrNull(1)            val phoneNumber = cursor.getStringOrNull(2)            val city = cursor.getStringOrNull(3)            val age = cursor.getIntOrNull(4)            val customerData = CustomerData(id, name, city, phoneNumber, age)            data.add(customerData)            cursor.moveToNext()        }        cursor.close()        return data    }    fun getCustomer(userId: Int): CustomerData? {        val data = ArrayList<CustomerData>()        val query = "SELECT * FROM customers WHERE id=?"        val cursor: Cursor = mDataBase.rawQuery(query, arrayOf(userId.toString()))        cursor.moveToFirst()        while (!cursor.isAfterLast) {            val id = cursor.getLong(0)            val name = cursor.getStringOrNull(1)            val phoneNumber = cursor.getStringOrNull(2)            val city = cursor.getStringOrNull(3)            val age = cursor.getIntOrNull(4)            val customerData = CustomerData(id, name, city, phoneNumber, age)            data.add(customerData)            cursor.moveToNext()        }        cursor.close()        return data.firstOrNull()    }    fun addCustomer(customer: CustomerData): Long {        val contentValues = ContentValues()        contentValues.put("name", customer.name)        contentValues.put("age", customer.age)        contentValues.put("city", customer.city)        contentValues.put("phone_number", customer.phoneNumber)        return mDataBase.insert("customers", null, contentValues)    }    fun removeCustomer(id: Long): Int {        return mDataBase.delete("customers", "id=?", arrayOf(id.toString()))    }    fun editCustomer(customer: CustomerData): Int {        val contentValues = ContentValues()        contentValues.put("name", customer.name)        contentValues.put("age", customer.age)        contentValues.put("city", customer.city)        contentValues.put("phone_number", customer.phoneNumber)        return mDataBase.update("customers", contentValues, "id=?", arrayOf(customer.id.toString()))    }}